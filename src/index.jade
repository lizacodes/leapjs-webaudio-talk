doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Starting a band with Web Audio and LeapJS

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,400,700', rel='stylesheet', type='text/css')
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-okaidia.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 Starting a band with LeapJS and Web Audio
        h3 Liza Nguyen<br>
          a(href="http://twitter.com/lnoogn") @lnoogn


      section
        h2 The Leap Motion Controller
        p
          img(src="images/leap-motion-controller.png")

      section
        h2 Get LeapJS
        pre
          code.language-markup.
            &lt;script src="//js.leapmotion.com/leap-0.5.0.js"&gt;&lt;/script&gt;
        pre
          code.language-clike npm install leapjs
        pre
          code.language-clike bower install leapjs

      section
        h2 Using LeapJS
        h3 Access frame data
        pre
          code.language-javascript.
            Leap.loop(function(frame) {
              frame.hands.forEach(function(hand) {
                var x = hand.palmPosition[0];
                var y = hand.palmPosition[1];
                moveCircle(x, y);
              });
            });

      section
        h2 Using LeapJS
        h3 Access gesture data
        pre
          code.language-javascript.
            var controller = new Leap.Controller({ enableGestures: true});

            controller.on('gesture', function(gesture) {
              /**
              * Gesture types include: circle, swipe, keyTap, screenTap
              */
              document.getElementById('gesture').className = gesture.type;
            });

      section
        h2 Web Audio
        ul
         li The Web Audio API is "a high-level JavaScript API for processing and synthesising audio in web applications". ~<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">W3C specification</a>

      section
        h2 Web Audio basics
        p
          strong Audio context
        div.ctx &nbsp;
        ul.node-wrapper
          li.clearfix
            div.node Source node
            div.node Processing node
            div.node Destination node
          li.clearfix
            div.node
              strong Guitar
            div.node
              strong Pedal
            div.node
              strong Amplifier

      section
        h2 Web Audio basics
        p Available on Firefox nightly build
          pre
            code.language-javascript.
              var audioCtx = new audioContext();
        p or in Chrome
          pre
            code.language-javascript.
              var audioCtx = new webkitAudioContext();

      section
        h2 Generating sound with an oscillator
        pre
          code.language-javascript.
            var oscillator = audioCtx.createOscillator();
            oscillator.type = 'sine';
            oscillator.frequency.value = 440;

            // Start playing the source immediately
            oscillator.start(0);

      section
        h2 Set the volume
        pre
          code.language-javascript.
            var gainNode = audioCtx.createGainNode();
            var now = audioCtx.currentTime;

            // Turn the volume down to 0%
            gainNode.gain.setValueAtTime(0, now);
      section
        h2 Connect the sound
        pre
          code.language-javascript.
            function play() {
              var now = audioCtx.currentTime;
              oscillator.connect(gainNode);
              gainNode.connect(audioCtx.destination);
              gainNode.gain.setValueAtTime(1, now);
            }

        button#sound-btn Play

      section
        h2 Combining LeapJS and Web Audio
        pre
          code.language-javascript.
            controller.on('gesture', function(gesture) {
              switch(type) {
                case 'circle':
                  if(gesture.state === 'stop') { playCoolSound(); }
                  break;
                case 'swipe':
                  if(gesture.state === 'stop') { playCoolerSound(); }
                  break;
              }
            });

      section
        h2 Demo time!

      section
        h2 Questions?
        h3 Any feedback welcome!
        h3 (´･ω･`)<br>
          a(href="http://twitter.com/lnoogn") @lnoogn


    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild